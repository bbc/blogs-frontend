# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.api_endpoint: 'https://api.test.bbc.co.uk/isite2-content-reader'
    app.branding_client.class: BBC\BrandingClient\BrandingClient
    app.default_locale: 'en_GB'
    app.endpoint_host: 'https://www.bbc.co.uk'
    app.feed_env.orbit: 'live'
    app.feed_env.branding: 'live'
    app.feed_env.comments: 'test'
    app.orbit_client.class: BBC\BrandingClient\OrbitClient
    app.morph.endpoint: 'https://morph.test.api.bbci.co.uk'
    cosmos_component_release: '%env(APP_RELEASE_NUMBER)%'

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/{Entity,Migrations,Repository,Tests,BlogsService/Domain}'

    # controllers are imported separately to make sure they
    # have the tag that allows actions to type-hint services
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\BlogsService\Infrastructure\Cache\Cache:
        arguments: ['@cache.blogs', 'blogs-frontend.app.%cosmos_component_release%']

    App\BlogsService\Infrastructure\Cache\CacheInterface:
        alias: App\BlogsService\Infrastructure\Cache\Cache

    App\BlogsService\Service\AuthorService:
        factory: ['@App\BlogsService\Service\ServiceFactory', 'getAuthorService']

    App\BlogsService\Service\BlogService:
        factory: ['@App\BlogsService\Service\ServiceFactory', 'getBlogService']

    App\BlogsService\Service\PostService:
        factory: ['@App\BlogsService\Service\ServiceFactory', 'getPostService']

    App\BlogsService\Service\TagService:
        factory: ['@App\BlogsService\Service\ServiceFactory', 'getTagService']

    App\BlogsService\Service\ServiceFactory:
        arguments:
            - '%app.api_endpoint%'
            - '@csa_guzzle.client.default'

    App\Service\CommentsService:
        arguments:
            - '@logger'
            - '@BBC\ProgrammesMorphLibrary\MorphClient'
            - '%env(COMMENTS_API_KEY)%'
            - '%app.feed_env.comments%'

    App\ValueObject\CosmosInfo:
        arguments: ['%cosmos_component_release%', '%env(COSMOS_ENV)%', '%app.endpoint_host%']

    BBC\BrandingClient\BrandingClient:
        class: "%app.branding_client.class%"
        arguments:
            - '@csa_guzzle.client.default'
            - '@cache.blogs'
            - env: '%app.feed_env.branding%'
              cacheKeyPrefix: 'blogs-frontend.%cosmos_component_release%.branding'

    BBC\BrandingClient\OrbitClient:
        class: '%app.orbit_client.class%'
        arguments:
            - '@csa_guzzle.client.default'
            - '@cache.blogs'
            - env: '%app.feed_env.orbit%'
              cacheKeyPrefix: 'blogs-frontend.%cosmos_component_release%.orbit'
              mustache: { cache: '%kernel.cache_dir%/mustache' }

    BBC\ProgrammesMorphLibrary\MorphClient:
        arguments:
            - '@logger'
            - '@csa_guzzle.client.default'
            - '%app.morph.endpoint%'

    cache.default_redis_provider:
            factory: 'App\Redis\RedisClusterFactory:createRedisCluster'
            class: App\Redis\RedisClusterFactory
            arguments:
                - ['%env(APP_REDIS_ENDPOINT)%']
                - '@logger'
            tags:
                - { name: 'monolog.logger', channel: 'cache' }

    ### Translations

    App\Translate\TranslateProvider:
        public: true

    RMP\Translate\TranslateFactory:
        arguments:
            - fallback_locale: 'en_GB'
              cachepath: '%kernel.cache_dir%/translations'
              domains: ['blogs']
              default_domain: 'blogs'
              debug: '%kernel.debug%'
              basepath: '%kernel.project_dir%/translations'
